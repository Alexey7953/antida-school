"""
33.1 Рога и Копыта
Условие

В компании "Рога и Копыта" работают менеджеры, техники и водители:

Менеджеры и техники получают фиксированную ежемесячную зарплату.
У водителей оплата почасовая.
Заработная плата техников и водителей зависит от их категории (A, B или C). Категория предоставляет коэффициент от базовой зарплаты: A - 125%, B - 115%, С - 100%.
Все работники могут получить фиксированную ежемесячную премию, которая прибавляется к их основной заработной плате.
Напишите программу, которая получает информацию о работниках компании и вычисляет, сколько компания должна выплатить своим сотрудникам в конце месяца.

Входные данные:

В первой строке: целое число N - количество сотрудников в компании.
В каждой из следующих N строк - информация о сотрудниках в виде набора полей через пробел:
профессия (manager, technician или driver)
вещественное число - базовая заработная плата (для сотрудников с почасовой оплатой - стоимость часа)
вещественное число - размер премии сотрудника
целое число - количество отработанных часов (для сотрудников с фиксированной оплатой - 0)
строка "A", "B" или "C" - категория сотрудника, присутствует только у техника и водителя
Выходные данные: вещественное число - суммарный размер выплат по заработной плате всех сотрудников.

Требования:

Программу необходимо реализовать в виде иерархии классов с минимальным объемом дублирования.
Иерархия должна поддерживать возможность расширения. К примеру, могут появиться сотрудники с почасовой зарплатой, не привязанной к категориям или с доплатой за переработку при привышении нормы часов. Реализовывать данное поведение не нужно, но оно должно быть легко внедряемым.
Следуйте Python Zen: код должен быть минималистичным, лаконичным, но хорошо читаемым.
"""


class Employee:
    def __init__(self, salary):
        self.salary = float(salary)

    def pay_check(self):
        return self.salary


class Slogger(Employee):
    def __init__(self, salary):
        Employee.__init__(self, salary)

    def paycheck(self):
        super().paycheck()


person = Slogger()
